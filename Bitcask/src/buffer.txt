
Class BitCaskEntry
//    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
//        this.timeStamp = in.readLong();
//        this.keyLength = in.readInt();
//        this.valueLength = in.readInt();
//
//        byte[] keyBytes = new byte[this.keyLength];
//        in.readFully(keyBytes,16,keyLength);
//        this.key = keyBytes;
//
//        byte[] valueBytes = new byte[this.valueLength];
//        in.readFully(valueBytes,16+keyLength,valueLength);
//        this.value = valueBytes;
//    }


Class BitCask >> start function
//        int extentionIndex = currentActiveFile.lastIndexOf(".");
//        int counter;
//

//        Pattern pattern = Pattern.compile("activeFile(\\d+)\\.");
//        Matcher matcher = pattern.matcher(currentActiveFile);
//
//        if (matcher.find()) {
//            // Extract the number and increment it
//            String numberStr = matcher.group(1);
//            counter = Integer.parseInt(numberStr) + 1;
//        } else {
//            counter = 0;
//        }
//
//
//        currentActiveFile = currentActiveFile.substring(0, extentionIndex);

Class FileHandler

////    private byte[] getSerializedEntry(Object entry) throws IOException {
////        ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
////        ObjectOutputStream objectStream = new ObjectOutputStream(byteStream);
////        objectStream.writeObject(entry);
////        return byteStream.toByteArray();
////    }
////
////
////
////    public long writeEntryToFile(String filePath, Object entry) throws IOException {
////        byte [] serializedEntry = getSerializedEntry(entry);
////        RandomAccessFile file = new RandomAccessFile(filePath, "rw");
////        long valPos = file.length();
////        file.seek(valPos);
////        file.write(serializedEntry);
////        return valPos;
////    }
//
//
//
//    public List<BitCaskEntry> readAllEntriesFromFile(String filePath) throws IOException, ClassNotFoundException {
//        List<BitCaskEntry> entries = new ArrayList<>();
//        BitCaskEntryHandler bitCaskHandler = new BitCaskEntryHandler();
//
//        RandomAccessFile file = new RandomAccessFile(filePath, "r");
//        long fileLength = file.length();
//        long currentPtr = 0;
//
//        while (currentPtr < fileLength) {
//            BitCaskEntry entry = bitCaskHandler.readBitCaskEntryFromFile(filePath, currentPtr);
//            currentPtr = bitCaskHandler.getFilePointer();
//
//            System.out.println("Entry Readed from file  >>> "+ entry.toString());
//            entries.add(entry);
//        }
//
//        return entries;
//    }
//


Class Compactor >> function get Most Recent Entries
        for(File file : files){
            String filePath = file.getPath();
            List<BitCaskEntry> entries = fileHandler.readAllEntriesFromFile(filePath);

            if(debug)       System.out.println("File in path >> " + filePath + " >>  has entries = " + entries.size());

            for(BitCaskEntry entry : entries) {
                if (!mostRecentEntries.containsKey(entry.getKey().toString())) {
                    mostRecentEntries.put(entry.getKey().toString(), entry);
                } else {

                    BitCaskEntry existingEntry = mostRecentEntries.get(entry.getKey().toString());
                    if (entry.getTimeStamp() > existingEntry.getTimeStamp()) {
                        if(debug)       System.out.println("Enstance most updated than me >> ");
                        mostRecentEntries.put(entry.getKey().toString(), entry); // Replace with more recent entry
                    }
                }
            }
        }


//    public void startMerge() throws IOException, ClassNotFoundException {
//        HashMap<String, BitCaskEntry> mostRecentEntries = getMostRecentEntriesFromFile();
//
//        if(debug) this.cp.printCompactDictionary(mostRecentEntries);
//
//        Random random = new Random();
//        String mergedPath = "src/Storage/merged" + String.valueOf(random.nextInt(1000));
//        RandomAccessFile mergedFile = new RandomAccessFile(mergedPath, "rw");
//        String hintPath = mergedPath+"hint";
//        RandomAccessFile hintFile = new RandomAccessFile(hintPath, "rw");
//
//        for (String key : mostRecentEntries.keySet()){
//                BitCaskEntry entry = mostRecentEntries.get(key);
//                long entryPos = mergedFile.getFilePointer();
//                mergedFile.write(entry.toByteArray());
//
//                HintFileEntry hintEntry = new HintFileEntry(entry.getTimeStamp() , entry.getKeyLength() , entry.getValueLength() , entryPos , entry.getKey() );
//                hintFile.write(hintEntry.toByteArray());
//        }
//
////        deleteMergedFiles(files);
//
//        mergedFile.close();
//        hintFile.close();
//    }


